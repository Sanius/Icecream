version: "3.8"

volumes:
  icecream-postgresql-volume:

networks:
  icecream-network:

services:
  postgresql:
    container_name: icecream-postgresql
    build:
      context: .
      dockerfile: docker/postgresql/Dockerfile
    ports:
      - ${POSTGRESQL_PORT}:5432
    volumes:            
      - icecream-postgresql-volume:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRESQL_USER}
      POSTGRES_PASSWORD: ${POSTGRESQL_PASSWORD} 
      POSTGRES_MULTIPLE_DATABASES: ${POSTGRESQL_PRODUCT_DB},${POSTGRESQL_IDENTITY_DB},${POSTGRESQL_CART_DB}, ${POSTGRESQL_CUSTOMER_DB}, ${POSTGRESQL_FEEDBACK_DB}, ${POSTGRESQL_INVENTORY_DB}, ${POSTGRESQL_LOOKUP_DB}, ${POSTGRESQL_ORDER_DB}, ${POSTGRESQL_PAYMENT_DB}
    networks:
      - icecream-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.3
    container_name: icecream-zookeeper
    hostname: zookeeper
    ports:
      - "${ZOOKEEPER_CLIENT_PORT}:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - icecream-network

  kafka:
    image: confluentinc/cp-kafka:7.3.3
    container_name: icecream-kafka
    hostname: kafka
    depends_on:
      - zookeeper
    ports:
      - "${KAFKA_PORT}:${KAFKA_PORT}"
      - "19092:19092"
      - "9999:9999"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:19092,EXTERNAL://127.0.0.1:${KAFKA_PORT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: "127.0.0.1"
      KAFKA_AUTHORIZER_CLASS_NAME: "kafka.security.authorizer.AclAuthorizer"
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    networks:
      - icecream-network

  schema-registry:
    image: confluentinc/cp-schema-registry:7.3.3
    hostname: schema-registry
    container_name: icecream-schema-registry
    depends_on:
      - zookeeper
      - kafka
    ports:
      - "${SCHEMA_REGISTRY_PORT}:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:19092
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - icecream-network

  ops-control-center:
    image: confluentinc/cp-enterprise-control-center:7.3.3
    container_name: icecream-ops-control-center
    hostname: ops-control-center
    depends_on:
      - zookeeper
      - kafka
      - schema-registry
    ports:
      - "${CP_CONTROL_CENTER_PORT}:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: "kafka:19092"
      CONTROL_CENTER_ZOOKEEPER_CONNECT: "zookeeper:2181"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021
    networks:
      - icecream-network

  identity:
    image: quay.io/keycloak/keycloak:21.1
    hostname: identity
    container_name: icecream-identity
    command: [ 'start-dev --import-realm' ]
    ports:
      - "${IDENTITY_PORT}:80"
    environment:
      KEYCLOAK_ADMIN: ${KC_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KC_ADMIN_PASSWORD}
      KC_PROXY: passthrough
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgresql:5432/${POSTGRESQL_IDENTITY_DB}
      KC_DB_USERNAME: ${KC_DB_USER}
      KC_DB_PASSWORD: ${KC_DB_PASSWORD}
      KC_HTTP_PORT: 80
    volumes:
      - ./piratereel-system/identity/data/import:/opt/keycloak/data/import
      - ./piratereel-system/identity/themes:/opt/keycloak/themes
    networks:
      - icecream-network
